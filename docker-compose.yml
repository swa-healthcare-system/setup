version: '3.8'

services:
 zookeeper:
    image: wurstmeister/zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    networks:
      - shared-net

 kafka:
    image: wurstmeister/kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LOG4J_LOGGERS=kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=DEBUG,kafka.consumer.ConsumerFetcherThread=DEBUG,kafka.server.KafkaApis=DEBUG
    networks:
      - shared-net


 config-server:
   image: andrei839/swa_config_server:latest
   container_name: config-server
   restart: always
   environment:
     - SPRING_CLOUD_CONFIG_STORAGE_GIT_URI=https://github.com/swa-healthcare-system/configuration-storage
     - DEFAULT_LABEL=main
     - SERVER_PORT=8888
   ports:
     - "8888:8888"
   networks:
     - shared-net

 elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - logging-net

 kibana:
    image: docker.elastic.co/kibana/kibana:7.17.13
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - logging-net

 eureka-server:
#    build:
#      context: ./eureka-server
#      dockerfile: Dockerfile
    container_name: eureka-server
    image: andrei839/swa_eureka_server:latest
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=
    networks:
      - shared-net

 prometheus:
        image: prom/prometheus
        user: "0"  # ðŸ‘ˆ Runs as root
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - /var/run/docker.sock:/var/run/docker.sock  # ðŸ‘ˆ This is the important part

        networks:
            - prometheus-network

 grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        depends_on:
            - prometheus
        networks:
            - prometheus-network
        volumes:
            - grafana-data:/var/lib/grafana

 doctor-service-db:
    image: postgres:16
    container_name: doctor-service-db
    restart: always
    environment:
      POSTGRES_DB: lib
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - internal-net

 doctor-service:
    image: andrei839/swa_doctor_service:latest
#    build: ./doctor-service
    container_name: doctor-service
    depends_on:
      - doctor-service-db
      - kafka
      - config-server
      - prometheus
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://doctor-service-db:5432/lib
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8092:8092"
    logging:
      driver: fluentd
      options:
        fluentd-address: "127.0.0.1:24228"
        fluentd-async: "true"
        tag: doctor-service
    labels:
      - "prometheus.port=8092"
      - "prometheus.path=/actuator/prometheus"
    networks:
      - internal-net
      - kafka-network
      - prometheus-network
      - logging-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

 fluentd-doctor:
   build:
     context: .
     dockerfile: ./fluentd/Dockerfile
   container_name: fluentd-doctor
   volumes:
     - ./fluentd/conf_doctor:/fluentd/etc
   ports:
     - "24228:24228"
   networks:
     - logging-net


 notification-service-db:
   restart: unless-stopped
   image: postgres:10
   ports:
     - "5556:5432"
   volumes:
     - "postgres-data-notifications:/var/lib/postgresql/data"
     - "./init-scripts-notification:/docker-entrypoint-initdb.d"
   environment:
     - POSTGRES_URL=jdbc:postgresql://notification-service-db:5432/notifications
     - POSTGRES_PASSWORD=password
     - POSTGRES_USER=postgres
     - POSTGRES_DB=notifications
   networks:
     - internal-net

 notification-service:
   # TODO: USE PUBLISHED IMAGE
#   build: ./notification-service
   image: andrei839/swa_notification_service:latest
   depends_on:
     - notification-service-db
     - kafka
     - config-server
   ports:
     - "8073:8080"
   environment:
     EUREKA_URL: http://eureka-server:8761/eureka
     SPRING_PROFILES_ACTIVE: default
     SPRING_DATASOURCE_URL: jdbc:postgresql://notification-service-db:5432/notifications
     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
   restart: unless-stopped
   logging:
      driver: fluentd
      options:
        fluentd-address: "127.0.0.1:24225"
        fluentd-async: "true"
        tag: notification-service
   volumes:
      - /var/run/docker.sock:/var/run/docker.sock
   networks:
     - internal-net
     - shared-net
     - logging-net

 fluentd-notification:
    build:
      context: .
      dockerfile: ./fluentd/Dockerfile
    container_name: fluentd-notification
    volumes:
      - ./fluentd/conf_notification:/fluentd/etc
    ports:
      - "24225:24225"
    networks:
      - logging-net

#TODO fix appointment service database problem
 postgres:
    restart: unless-stopped
    image: postgres:10
    ports:
      - "5555:5432"
    volumes:
      - "postgres-data-appointments:/var/lib/postgresql/data"
      - "./init-scripts-appointments:/docker-entrypoint-initdb.d"
    environment:
      - "POSTGRES_PASSWORD=password"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_DB=appointments"
    networks:
      - internal-net

 ktor-server:
    image: mokripat/ktor-server:latest
    depends_on:
      - postgres
      - config-server
      - kafka
      - eureka-server
    ports:
      - "8089:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=appointments
      - DB_USER=postgres
      - DB_PASSWORD=password
      - KAFKA_BROKER=kafka:9092
      - EUREKA_URL=http://eureka-server:8761/eureka/v2
      - CONFIG_URL=http://config-server:8888
      - HOSTNAME=appointment-service
      - HOST_IP=host.docker.internal
      - SERVICE_PORT=8089
    labels:
      - "prometheus.port=8089"
      - "prometheus.path=/metrics"
    command: [ "java", "-jar", "/app/ktor-server.jar" ]
    logging:
      driver: fluentd
      options:
        fluentd-address: "127.0.0.1:24227"
        fluentd-async: "true"
        tag: appointment-service
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - internal-net
      - shared-net
      - prometheus-network
      - logging-net

 fluentd-appointment:
   build:
     context: .
     dockerfile: ./fluentd/Dockerfile
   container_name: fluentd-appointment
   volumes:
     - ./fluentd/conf_appointment:/fluentd/etc
   ports:
     - "24227:24227"
   networks:
     - logging-net

 billing-service:
   image: lukesdan/myapp:latest
   container_name: billing-service
   ports:
     - "8081:8081"
   depends_on:
     - postgres-billing
   environment:
     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-billing:5432/billingdb
     SPRING_DATASOURCE_USERNAME: user
     SPRING_DATASOURCE_PASSWORD: password
     SPRING_JPA_HIBERNATE_DDL_AUTO: update
     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
     SPRING_EUREKA_URL: http://eureka-server:8761/eureka
   logging:
     driver: fluentd
     options:
       fluentd-address: "127.0.0.1:24224"
       fluentd-async: "true"
       tag: billing-service
   networks:
     - internal-net
     - shared-net
     - logging-net
     - prometheus-network
   volumes:
     - /var/run/docker.sock:/var/run/docker.sock
   labels:
     - "prometheus.port=8081"
     - "prometheus.path=/actuator/prometheus"

 postgres-billing:
   image: postgres:15
   container_name: billing-db
   restart: always
   environment:
     POSTGRES_DB: billingdb
     POSTGRES_USER: user
     POSTGRES_PASSWORD: password
   ports:
     - "5432:5432"
   networks:
     - internal-net

 fluentd-billing:
   build:
    context: ./fluentd
    dockerfile: Dockerfile
   container_name: fluentd-billing
   volumes:
     - ./fluentd/conf_billing:/fluentd/etc
   ports:
     - "24224:24224"
   networks:
     - logging-net

 # MongoDB Service
 mongodb:
   image: mongo:4.4
   container_name: mongodb
   ports:
     - "27017:27017"
   volumes:
     - mongodb_data:/data/db
   networks:
     - mongo

     # Quarkus Java Application Service
 patient-service:
#   build:
#     context: .  # Set build context to the root directory of your project
#     dockerfile: Dockerfile.jvm  # Path to the Dockerfile
   container_name: patient-service
   image: shakuspyr/patient-service:latest  # <-- This is the image name
   environment:
     - QUARKUS_MONGODB_CONNECTION_STRING=mongodb://mongodb:27017/?directConnection=true
     - QUARKUS_MONGODB_DATABASE=patient-service
     - QUARKUS_LIVE_RELOAD=true
     - KAFKA_URI=kafka:9092
     - EUREKA_URL=http://eureka-server:8761/eureka/v2
     - HOSTNAME=appointment-service
     - HOST_IP=host.docker.internal
     - SERVICE_PORT=8008
   ports:
     - "8008:8008"
   logging:
     driver: fluentd
     options:
       fluentd-address: "127.0.0.1:24226"
       fluentd-async: "true"
       tag: patient-service
   volumes:
     - /var/run/docker.sock:/var/run/docker.sock
   labels:
     - "prometheus.port=8008"
     - "prometheus.path=/q/metrics"
   depends_on:
     - mongodb
     - kafka
     - config-server
   networks:
     - kafka-network
     - prometheus-network
     - mongo
     - logging-net

 fluentd-patient:
   build:
     context: .
     dockerfile: ./fluentd/Dockerfile
   container_name: fluentd-patient
   volumes:
     - ./fluentd/conf_patient:/fluentd/etc
   ports:
     - "24226:24226"
   networks:
     - logging-net

volumes:
    grafana-data:
    postgres-data-notifications:
    mongodb_data:
    postgres-data-appointments:

networks:
  internal-net:
    internal: true
  kafka-network:
    external: true
    name: kafka-network
  shared-net:
    external: true
    name: kafka-network
  prometheus-network:
    external: true
    name: prometheus-network
  logging-net:
    external: true
    name: logging-network
  mongo:
    driver: bridge
